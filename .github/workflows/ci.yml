name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11']
        exclude:
          # Python 3.6 and 3.7 are not available on ubuntu-24.04 (ubuntu-latest)
          - os: ubuntu-latest
            python-version: '3.6'
          - os: ubuntu-latest
            python-version: '3.7'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install ExifTool (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install specific ExifTool version matching CircleCI
        wget https://jmathai.s3.us-east-1.amazonaws.com/github/elodie/Image-ExifTool-13.19.tar.gz
        gzip -dc Image-ExifTool-13.19.tar.gz | tar -xf -
        cd Image-ExifTool-13.19
        perl Makefile.PL
        sudo make install
        cd ..
        rm -rf Image-ExifTool-13.19*
        echo "ExifTool version: $(exiftool -ver)"
        which exiftool

    - name: Install ExifTool (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install exiftool

    - name: Install ExifTool (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install exiftool

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r elodie/tests/requirements.txt
        pip install -r elodie/plugins/googlephotos/requirements.txt
        pip install nose coverage coveralls

    - name: Verify ExifTool installation
      run: exiftool -ver

    - name: Enable debug mode for testing
      run: |
        # Enable debug mode in constants.py for better test coverage
        sed -i.bak 's/debug = False/debug = True/g' elodie/constants.py || true
        # On Windows, use different sed syntax
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          sed -i 's/debug = False/debug = True/g' elodie/constants.py || true
        fi
      shell: bash

    - name: Run tests with coverage (matching CircleCI)
      run: |
        export ELODIE_DIR=${PWD}
        cd elodie/tests
        python run_tests.py -w . --with-coverage --cover-package=elodie
      shell: bash

    - name: Upload coverage to Coveralls
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Generate coverage report
        cd elodie/tests
        coverage xml --omit="*/tests/*"
        cd ../..
        # Upload to Coveralls using both methods for reliability
        coveralls || echo "Coveralls upload failed, continuing..."
      continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run flake8
      run: |
        flake8 elodie/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 elodie/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff elodie/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff elodie/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security check
      run: |
        bandit -r elodie/ -f json -o bandit-report.json || true

    - name: Run safety check for dependencies
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2