name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r elodie/plugins/googlephotos/requirements.txt
        pip install safety

    - name: Run Python security scan with Safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Node dependencies
      run: npm install

    - name: Run npm security audit
      run: |
        npm audit --json > npm-audit-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          npm-audit-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  code-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
        queries: security-extended

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: docker build -t elodie:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'elodie:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy fs scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install license checker
      run: |
        pip install pip-licenses

    - name: Check Python package licenses
      run: |
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=plain

    - name: Setup Node.js for license check
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Node dependencies and check licenses
      run: |
        npm install
        npx license-checker --json --out npm-licenses.json
        npx license-checker

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          python-licenses.json
          npm-licenses.json

  security-summary:
    name: Security Summary
    needs: [dependency-scan, secrets-scan, code-scan, docker-scan, license-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- **Secrets Scan**: ${{ needs.secrets-scan.result }}" >> security-summary.md  
        echo "- **Code Analysis**: ${{ needs.code-scan.result }}" >> security-summary.md
        echo "- **Docker Scan**: ${{ needs.docker-scan.result }}" >> security-summary.md
        echo "- **License Check**: ${{ needs.license-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review any failed scans in the Security tab" >> security-summary.md
        echo "2. Address high-priority vulnerabilities" >> security-summary.md
        echo "3. Update dependencies as needed" >> security-summary.md
        echo "4. Review license compliance issues" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md